generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource chain_tracing {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Graph {
  graph_id          Int                 @id @default(autoincrement())
  description       String              @chain_tracing.VarChar(255)
  created_at        DateTime
  updated_at        DateTime
  graphTransactions Graph_Transaction[]

  reports Report[] // Added for Report relation
}

model Token {
  id       Int     @id @default(autoincrement())
  address  String  @chain_tracing.Char(42)
  label    String
  name     String?
  symbol   String?
  website  String?
  image    String?
  chain_id Int

  chain Chain @relation(fields: [chain_id], references: [chain_id])

  Transaction Transaction[]

  @@index([chain_id], map: "Token_chain_id_fkey")
}

model Smartcontract {
  contract_id       Int                 @id @default(autoincrement())
  address           String              @chain_tracing.Char(42)
  source_code       String              @chain_tracing.MediumText
  is_verified       Boolean?
  type              String              @chain_tracing.Text
  chain_id          Int
  name_tag          String?
  logo              String?
  label_source      label_source        @default(ethereum)
  abi               String?             @chain_tracing.Text
  chain             Chain               @relation(fields: [chain_id], references: [chain_id])
  
  @@index([chain_id], map: "Smartcontract_chain_id_fkey")
}


model Transaction {
  transaction_id Int    @id @default(autoincrement())
  hash           String @chain_tracing.Char(66)
  block_hash     String @chain_tracing.Char(66)
  from_address   String @chain_tracing.Char(42)
  to_address     String @chain_tracing.Char(42)
  amount         BigInt
  token_id       Int?
  chain_id       Int
  summary        String

  token              Token?               @relation(fields: [token_id], references: [id])
  chain              Chain               @relation(fields: [chain_id], references: [chain_id])
  graph_transactions Graph_Transaction[] // Added for Graph_Transaction relation

  @@index([chain_id], map: "Transaction_chain_id_fkey")
}

model TornadoWithdrawTransaction {
  transaction_id    Int      @id @default(autoincrement())
  hash              String   @chain_tracing.Char(66)
  from_address      String   @chain_tracing.Char(42)
  recipient_address String   @chain_tracing.Char(42)
  to_address        String   @chain_tracing.Char(42)
  from_proxy        Boolean?
  contract_address  String   @chain_tracing.Char(42)
  timestamp         BigInt
  value             BigInt
}

model TornadoDepositTransaction {
  transaction_id   Int    @id @default(autoincrement())
  hash             String @chain_tracing.Char(66)
  from_address     String @chain_tracing.Char(42)
  to_address       String @chain_tracing.Char(42)
  contract_address String @chain_tracing.Char(42)
  timestamp        BigInt
  value            String
}

model Eoa {
  eoa_id         Int          @id @default(autoincrement())
  native_balance BigInt
  name_tag       String?
  label          String?
  hash           String
  chain_id       Int
  logo           String?
  label_source   label_source @default(ethereum)
  chain          Chain        @relation(fields: [chain_id], references: [chain_id])
}

model Graph_Transaction {
  graph_transaction_id Int         @id @default(autoincrement())
  graph_id             Int
  transaction_id       Int
  sequence_number      BigInt
  graph                Graph       @relation(fields: [graph_id], references: [graph_id])
  transaction          Transaction @relation(fields: [transaction_id], references: [transaction_id])

  @@index([graph_id], map: "Graph_Transaction_graph_id_fkey")
  @@index([transaction_id], map: "Graph_Transaction_transaction_id_fkey")
}

model Chain {
  chain_id      Int             @id
  hash          String
  name          String
  // Relations
  eoa           Eoa[]
  token         Token[]
  smartContract Smartcontract[]
  transaction   Transaction[]
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  password String

  reports Report[]  // ðŸ‘ˆ 1 user has many reports
}

model Report {
  report_id        Int     @id @default(autoincrement())
  user_id          Int     // ðŸ‘ˆ Add this line for the foreign key
  graph_id         Int?
  title            String  @chain_tracing.VarChar(255)
  amount           BigInt
  transaction_hash String
  description      String
  timestamp        BigInt
  category         String
  address          String
  url              String?
  ip               String?

  user  User   @relation(fields: [user_id], references: [id]) // ðŸ‘ˆ define relation
  graph Graph? @relation(fields: [graph_id], references: [graph_id])
}

enum label_source {
  ethereum
  moralis
}
